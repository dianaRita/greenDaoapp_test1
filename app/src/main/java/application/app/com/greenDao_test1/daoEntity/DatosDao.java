package application.app.com.greenDao_test1.daoEntity;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DATOS".
*/
public class DatosDao extends AbstractDao<Datos, Long> {

    public static final String TABLENAME = "DATOS";

    /**
     * Properties of entity Datos.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Integer = new Property(1, Integer.class, "integer", false, "INTEGER");
        public final static Property Real = new Property(2, Double.class, "real", false, "REAL");
        public final static Property Text = new Property(3, String.class, "text", false, "TEXT");
        public final static Property NumDate = new Property(4, java.util.Date.class, "numDate", false, "NUM_DATE");
        public final static Property NumBool = new Property(5, Boolean.class, "numBool", false, "NUM_BOOL");
    }


    public DatosDao(DaoConfig config) {
        super(config);
    }
    
    public DatosDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DATOS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"INTEGER\" INTEGER," + // 1: integer
                "\"REAL\" REAL," + // 2: real
                "\"TEXT\" TEXT," + // 3: text
                "\"NUM_DATE\" INTEGER," + // 4: numDate
                "\"NUM_BOOL\" INTEGER);"); // 5: numBool
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DATOS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Datos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer integer = entity.getInteger();
        if (integer != null) {
            stmt.bindLong(2, integer);
        }
 
        Double real = entity.getReal();
        if (real != null) {
            stmt.bindDouble(3, real);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        java.util.Date numDate = entity.getNumDate();
        if (numDate != null) {
            stmt.bindLong(5, numDate.getTime());
        }
 
        Boolean numBool = entity.getNumBool();
        if (numBool != null) {
            stmt.bindLong(6, numBool ? 1L: 0L);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Datos entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer integer = entity.getInteger();
        if (integer != null) {
            stmt.bindLong(2, integer);
        }
 
        Double real = entity.getReal();
        if (real != null) {
            stmt.bindDouble(3, real);
        }
 
        String text = entity.getText();
        if (text != null) {
            stmt.bindString(4, text);
        }
 
        java.util.Date numDate = entity.getNumDate();
        if (numDate != null) {
            stmt.bindLong(5, numDate.getTime());
        }
 
        Boolean numBool = entity.getNumBool();
        if (numBool != null) {
            stmt.bindLong(6, numBool ? 1L: 0L);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Datos readEntity(Cursor cursor, int offset) {
        Datos entity = new Datos( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // integer
            cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2), // real
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // text
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)), // numDate
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // numBool
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Datos entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setInteger(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setReal(cursor.isNull(offset + 2) ? null : cursor.getDouble(offset + 2));
        entity.setText(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setNumDate(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
        entity.setNumBool(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Datos entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Datos entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Datos entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
